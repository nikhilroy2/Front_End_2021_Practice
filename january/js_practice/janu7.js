// let arr = ["Nikhil", "Sonchoy", "Boku"]
// let fill = arr.filter((a,b,c)=> {
//     return a===arr[0]
// })
// console.log(fill)

// forEach()
// map()
// filter()
// reduce()
// reduceRight()
// every()
// some()
// indexOf()
// lastIndexOf()
// find()
// findIndex()

// forEach()
// map()
// filter()
// reduce()
// reduceRight()
// every()
// some()
// indexOf()
// lastIndexOf()
// find()
// findIndex()


// forEach()
// map()
// filter()
// reduce()
// reduceRight()
// every()
// some()
// indexOf()
// lastIndexOf()
// find()
// findIndex


// forEach()
// map()
// filter()
// reduce()
// reduceRight()
// every()
// some()
// find()
// findIndex()
// indexOf()
// lastIndexOf()

(() => {
// ............. forEach()....................
    {
        let txt = "";
        let forArr = ["Nikhil", "Sonchoy", "Bangladesh"]
        forArr.forEach(function (value, index, array) {
            txt = txt + index + '. ' + value + '\n'
        })
        //console.log(`We got: \n${txt}`)
    }
// ............. forEach()....................End

// .......... map().........

    {
        let arr = [3,4,2,4,"Nikhil", "Boku"]
        let mp = arr.map((value, index, array)=> {
            if(typeof value === 'number'){
                return value * 5;
            } else if(typeof value === 'string'){
                return value + " I am string "
            }
        })
        //console.log(mp)
    }
// .......... map().........End
// .......... filter().........

    {
        let arr = [54,23,3,3,4,2,"Village", "Country", "Program"]
        let fillArr = arr.filter((value, index, array)=> {
             if(typeof value === 'string'){
                 return value;
             } else if (value === 2){
                 let nesting = [45,3,2,3,"Boku"]
                 //nesting.forEach((value, index, array)=> console.log(value))
             } 
        })
      // console.log(fillArr)

    }
// .......... filter().........End
// .......... reduce().........
{
    let rds = [0,3,1,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43,3,4,23,4,3,43];
    let rdsTotal = rds.reduce((total, value, index, array)=> {
        let arr = [5,3,2,4];
        let arrMp = arr.map((a,b)=> a * 10);
      //  console.log(arrMp)
        return total + value;
    })   
    //console.log(rdsTotal)
}
// .......... reduce().........End
// .......... findIndex().........
{
    let index = [3,2,54,34,5,34,2];
    let fIndex = index.findIndex((a,b,c)=> {
            return a + b  + c;
    })
   // console.log(fIndex)
}

// .......... findIndex().........End
// .......... find().........
{
    let arr = [3,4,3,4,32,45,6,45,34];
    let arFind = arr.find((value, index, array)=> {
        return value > 32
    })
    //console.log(arFind)
}
// .......... find().........
// .......... lastIndexOf().........
{
    let arr = [4,32,432,4234,34,35];
    let index = arr.lastIndexOf((value, index, array)=> {
        return value;
    })
   // console.log(index)
}
// .......... lastIndexOf().........End
// .......... every().........

{
    let arr = [4,3,3,4,3232,2,4];
    let arrEvery = arr.every((value, index, array)=> {
        return value != 5;
    })
  //  console.log(arrEvery)
}

// .......... every().........end


// .......... some().........
{
    let arr = [5,3,2,3,4,3,4,2];
    let arrSome = arr.some((value, index, array)=> {
        return value != 2;
    })
    console.log(arrSome)
}



})()









